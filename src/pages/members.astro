---
import Layout from '../layouts/Layout.astro';
import type { Results, Content } from './index.astro';
import Member from "../components/Member.astro";
import type { MemberType } from "../components/Member.astro";
const expertise = [1, 2, 3, 4, 5];

const API_URL = `${import.meta.env.BASEROW_API}/database/rows/table/513/?user_field_names=true`;
const membersResponse = await fetch(
  `${import.meta.env.ROOT_API}/api/v1/Contact`,
  {
    headers: {
      "X-api-key": import.meta.env.ESPO_API_KEY,
    },
  },
);

const members = (await membersResponse.json()) as { list: MemberType[] };
members.list.sort((a: MemberType, b: MemberType) => {
  if (a.publicPhotoId && !b.publicPhotoId) {
    return -1;
  } else if (b.publicPhotoId && !a.publicPhotoId) {
    return 1;
  }
  if (a.publicDescription && !b.publicDescription) {
      return -1;
  } else if (b.publicDescription && !b.publicDescription) {
      return 1;
  }
  return 0;
});

const response = await fetch(API_URL, {
  headers: {
    Authorization: `Token ${import.meta.env.BASEROW_API_KEY}`,
  },
});

let json;
let fields: Content = {};
try {
  json = (await response.json()) as Results;
  fields = json.results.reduce((fieldsObj, block) => {
    fieldsObj[block.field] = { ...block };
    return fieldsObj;
  }, {} as Content);
} catch (e) {}
---

<Layout title="508.dev Members">
  <div class="relative isolate bg-white px-6 py-24 sm:py-32 lg:px-8">
  <div class="absolute inset-x-0 -top-3 -z-10 transform-gpu overflow-hidden px-36 blur-3xl" aria-hidden="true">
      <div
          class="mx-auto aspect-[1155/678] w-[72.1875rem] bg-gradient-to-tr from-indigo-600 to-indigo-50 opacity-30"
          style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"
      >
    </div>
  </div>

<div >
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    const urlSkill = urlParams.get("skill");

    // Track button state
    let checked = [false, false, false, false, false];
    // Track selection state per member skill type
    let selected: string[] = [];
    function addClass(element: Element, className: string) {
      element.classList.add(className);
    }
    function removeClass(element: Element, className: string) {
      element.classList.remove(className);
    }
    const checkedClassNames = [
      "bg-indigo-600",
      "text-white",
      "hover:bg-indigo-500",
    ];
    const unCheckedClassNames = [
      "ring-1",
      "ring-inset",
      "ring-gray-300",
      "bg-white",
      "text-gray-900",
      "hover:bg-gray-50",
    ];

    function toggle(el: Element) {
      if (!(el instanceof HTMLElement)) {
        return;
      }

      if (selected.includes(String(el.dataset.skill))) {
        // Toggle it off
        selected.splice(selected.indexOf(String(el.dataset.skill)), 1);
      } else {
        // Toggle it on
        selected.push(String(el.dataset.skill));
      }

      // Clear out previous filtered members
      [...document.getElementsByClassName("member")].forEach((memberEl) => {
        if (
          !(memberEl instanceof HTMLElement) ||
          !(el instanceof HTMLElement)
        ) {
          return;
        }
        memberEl.classList.add("visible");
        memberEl.classList.remove("invisible");
        memberEl.classList.remove("order-first");
        memberEl.classList.remove("order-last");
      });

      selected.forEach((skillName) => {
        [...document.getElementsByClassName("member")].forEach((memberEl) => {
          if (
            !(memberEl instanceof HTMLElement) ||
            !(el instanceof HTMLElement)
          ) {
            return;
          }
          if (
            memberEl.dataset.memberSkills &&
            memberEl.dataset.memberSkills.includes(skillName)
          ) {
            memberEl.classList.add("visible");
            memberEl.classList.add("order-first");
          } else {
            memberEl.classList.add("invisible");
            memberEl.classList.add("order-last");
          }
        });
      });
      checked[Number(el.id) - 1] = !checked[Number(el.id) - 1];
      if (checked[Number(el.id) - 1]) {
        checkedClassNames.forEach((name) => {
          addClass(el, name);
        });
        unCheckedClassNames.forEach((name) => {
          removeClass(el, name);
        });
      } else {
        checkedClassNames.forEach((name) => {
          removeClass(el, name);
        });
        unCheckedClassNames.forEach((name) => {
          addClass(el, name);
        });
      }
    }

    [...document.getElementsByClassName("expertise")].forEach((el) => {
      unCheckedClassNames.forEach((name) => {
        addClass(el, name);
      });
      el.addEventListener("click", (e) => {
        e.preventDefault();
        toggle(el);
      });
    });
    if (urlSkill) {
      let preToggledButton;
      if (urlSkill === 'data science') {
          preToggledButton = document.querySelectorAll(
              `[data-skill="data science"]`,
          );
      } else {
          preToggledButton = document.querySelectorAll(
              `[data-skill=${urlSkill}]`,
          );
      }

      if (preToggledButton[0]) {
        toggle(preToggledButton[0]);
      }
    }
  </script>
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mx-auto max-w-2xl sm:text-center">
      <h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
        {fields["members_title"]?.content}
      </h2>
      <p class="mt-6 text-lg leading-8 text-gray-600">
        {fields["members_description"]?.content}
      </p>
    </div>

    <fieldset class="mt-2">
      <legend class="sr-only">Filter by expertise</legend>
      <div class="grid grid-cols-3 gap-3 sm:grid-cols-5">
        {
          expertise.map((num) => {
            return (
              <label
                class="flex items-center justify-center rounded-md py-3 px-3 text-sm font-semibold uppercase sm:flex-1 cursor-pointer focus:outline-none expertise"
                id={String(num)}
                data-skill={fields[`expertise_${num}_src`].content}
              >
                <input
                  type="radio"
                  name="memory-option"
                  value="4 GB"
                  class="sr-only"
                  aria-labelledby="memory-option-0-label"
                />
                <span id="memory-option-0-label">
                  {fields[`expertise_${num}_name`].content}
                </span>
              </label>
            );
          })
        }
      </div>
    </fieldset>

    <ul
      role="list"
      class="mx-auto mt-20 grid max-w-2xl grid-cols-1 gap-x-6 gap-y-20 sm:grid-cols-2 lg:max-w-4xl lg:gap-x-8 xl:max-w-none"
    >
      {
        members.list
          .filter((member) => {
            return member.type === "Candidate / Member";
          })
          .map((member) => {
            return <Member {...member} />;
          })
      }

      <!-- More people... -->
    </ul>
  </div>
</div>
  </div>
</Layout>
