---
import Member, { MemberType } from "../components/Member.astro";
const expertise = [1, 2, 3, 4, 5];

const API_URL = `${import.meta.env.BASEROW_API}/database/rows/table/513/?user_field_names=true`;
const membersResponse = await fetch(
  `${import.meta.env.ROOT_API}/api/v1/Contact`,
  {
    headers: {
      "X-api-key": import.meta.env.ESPO_API_KEY,
    },
  },
);

const members = (await membersResponse.json()) as { list: MemberType[] };
members.list.sort((a: MemberType, b: MemberType) => {
  if (a.publicPhotoId && !b.publicPhotoId) {
    return -1;
  } else if (b.publicPhotoId && !a.publicPhotoId) {
    return 1;
  }
  return 0;
});

const response = await fetch(API_URL, {
  headers: {
    Authorization: `Token ${import.meta.env.BASEROW_API_KEY}`,
  },
});

let json;
let fields = [];
try {
  json = (await response.json()) as Results;
  fields = json.results.reduce((fieldsObj, block) => {
    fieldsObj[block.field] = { ...block };
    return fieldsObj;
  }, {} as Content);
} catch (e) {}
---

<div class="bg-white py-24 sm:py-32">
  <script>
   let checked = [false, false, false, false, false];
   function addClass(element: Element, className: string) {
     element.classList.add(className);
   }
   function removeClass(element: Element, className: string) {
     element.classList.remove(className);
   }
   const checkedClassNames = ["bg-indigo-600", "text-white", "hover:bg-indigo-500"];
   const unCheckedClassNames = ["ring-1", "ring-inset", "ring-gray-300", "bg-white", "text-gray-900", "hover:bg-gray-50"];

   function toggle(el: Element) {
     checked[Number(el.id) -1] = !checked[Number(el.id) -1 ];
     if (checked[Number(el.id) - 1]){
       checkedClassNames.forEach((name)=>{addClass(el, name)});
       unCheckedClassNames.forEach((name)=>{removeClass(el, name)});
     } else {
       checkedClassNames.forEach((name)=>{removeClass(el, name)});
       unCheckedClassNames.forEach((name)=>{addClass(el, name)});
     }
   }

   [...document.getElementsByClassName('expertise')].forEach((el) => {
     unCheckedClassNames.forEach((name)=>{addClass(el, name)});
     el.addEventListener("click", (e)=>{
       e.preventDefault();
       toggle(el)
     });
   });
  </script>
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mx-auto max-w-2xl sm:text-center">
      <h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
        {fields["members_title"]?.content}
      </h2>
      <p class="mt-6 text-lg leading-8 text-gray-600">
        {fields["members_description"]?.content}
      </p>
    </div>

    <fieldset class="mt-2">
      <legend class="sr-only">Choose a memory option</legend>
      <div class="grid grid-cols-3 gap-3 sm:grid-cols-6">

        {expertise.map((num)=>{
        return (
        <label
          class="flex items-center justify-center rounded-md py-3 px-3 text-sm font-semibold uppercase sm:flex-1 cursor-pointer focus:outline-none expertise"
          id={String(num)}
        >
          <input
            type="radio"
            name="memory-option"
            value="4 GB"
            class="sr-only"
            aria-labelledby="memory-option-0-label"
          />
          <span id="memory-option-0-label">
            {fields[`expertise_${num}_name`].content}
          </span>
        </label>
        )})}
      </div>
    </fieldset>

    <ul
      role="list"
      class="mx-auto mt-20 grid max-w-2xl grid-cols-1 gap-x-6 gap-y-20 sm:grid-cols-2 lg:max-w-4xl lg:gap-x-8 xl:max-w-none"
    >
      {
        members.list
          .filter((member) => {
            return member.type === "Candidate / Member";
          })
          .map((member) => {
            return <Member {...member} />;
          })
      }

      <!-- More people... -->
    </ul>
  </div>
</div>
